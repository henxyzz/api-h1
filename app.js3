const express = require('express');
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const chalk = require('chalk');
const dotenv = require('dotenv');
const app = express();

dotenv.config();

const logFilePath = path.join(__dirname, 'server.log');

// Fungsi untuk memeriksa apakah modul sudah terinstal
function isModuleInstalled(moduleName) {
  try {
    require.resolve(moduleName);
    return true;
  } catch (e) {
    return false;
  }
}

// Fungsi untuk menginstall modul yang hilang
function installModule(moduleName) {
  console.log(`🚨 Modul ${moduleName} tidak ditemukan. Menginstall...`);
  try {
    execSync(`npm install ${moduleName}`, { stdio: 'inherit' });
  } catch (err) {
    console.error(`Gagal menginstall modul ${moduleName}:`, err);
  }
}

// Menangani error uncaughtException
process.on('uncaughtException', (err) => {
  if (err.code === 'MODULE_NOT_FOUND') {
    const missingModule = err.message.match(/'([^']+)'/)[1];
    if (!isModuleInstalled(missingModule)) {
      installModule(missingModule);
      require(err.requireStack[0]);
    } else {
      console.error('🚨 Error lain:', err);
    }
  } else {
    console.error('🚨 Error tak terduga:', err);
  }
});

// === Fungsi Logging ===
function logMessage(message, type = 'info') {
  const timestamp = new Date().toISOString();
  const logEntry = `[${timestamp}] ${message}\n`;
  
  fs.appendFileSync(logFilePath, logEntry, 'utf8');
  
  const colors = {
    info: chalk.blue,
    success: chalk.green,
    error: chalk.red,
    warning: chalk.yellow,
  };

  console.log(colors[type](logEntry.trim()));
}

// === Rate Limit ===
const rateLimit = require('express-rate-limit');
const limiter = rateLimit({
  windowMs: 60 * 1000, 
  max: 1000, 
  message: 'Terlalu banyak request. Coba lagi nanti.',
});

// === Middleware ===
app.use("/outputs", express.static(path.join(__dirname, "outputs")));
app.set('json spaces', 2);
app.use('/api/', limiter);
app.use(express.urlencoded({ extended: true }));
app.use(express.json());

// === Serve Static Files ===
app.use(express.static(path.join(__dirname, 'public')));

// === Memuat Routes Otomatis ===
fs.readdirSync(path.join(__dirname, 'routes')).forEach(file => {
  const route = require(path.join(__dirname, 'routes', file));
  app.use(`/api/${path.basename(file, '.js')}`, route);
});

// === API Docs ===
app.get('/api/docs', (req, res) => {
  const routesPath = path.join(__dirname, 'routes');
  let apiDocs = {};

  fs.readdirSync(routesPath).forEach((file) => {
    if (file.endsWith('.js')) {
      const route = require(path.join(routesPath, file));
      if (route.tags) {
        route.tags.forEach((tag) => {
          if (!apiDocs[tag]) apiDocs[tag] = [];
          apiDocs[tag].push(`/api/${file.replace('.js', '')}`);
        });
      }
    }
  });

  res.json(apiDocs);
});

// === Halaman Utama (/) ===
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// === API Log ===
app.get('/api/logs', (req, res) => {
  fs.readFile(logFilePath, 'utf8', (err, data) => {
    if (err) {
      logMessage('❌ Gagal membaca log!', 'error');
      return res.status(500).json({ error: 'Gagal membaca log.' });
    }

    const logs = data.split('\n').filter(line => line); // Hapus baris kosong
    res.json({ logs });
  });
});

// === Halaman Log (/logs) ===
app.get('/logs', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'logs.html'));
});

// === Halaman Upload ===
app.get('/uploads', (req, res) => {
  const password = req.query.password;
  if (password === process.env.UPLOAD_PASSWORD) {
    res.sendFile(path.join(__dirname, 'public', 'upload.html'));
  } else {
    res.status(403).send('Password salah. Akses ditolak.');
  }
});

// === Menjalankan Server ===
const port = process.env.PORT || 8000;
app.listen(port, () => {
  logMessage(`🚀 Server berjalan di http://localhost:${port}`, 'success');
});
